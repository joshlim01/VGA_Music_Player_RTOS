/*
5-bit Linear Feedback Shift Register (LFSR)
used for generate 5-bit pesudo random number --> since it is 5-bit so 2 ^ 5 - 1 different outputs
Inputs:
- clk: Clock signal
- reset: Reset signal to initialize the LFSR

Output:
- out_random_number: 5-bit pseudo-random number generated by the LFSR
*/
module LFSR (
    input logic clk,          // Clock input
    input logic reset,        // Reset input
    output logic [4:0] out_random_number  // 5-bit LFSR output
);

    // Initialize the LFSR state to a non-zero value
    initial out_random_number = 5'b00001;

    // Feedback wire - XOR of the 0th and 2nd bits
    wire feedback;
    assign feedback = out_random_number[0] ^ out_random_number[2];

    // Sequential block to update the LFSR state on each clock cycle
    always_ff @(posedge clk or posedge reset) begin
        if (reset)
            out_random_number <= 5'b00001; // Reset the LFSR to the initial state
        else
				// shifts right: 4->3, 3->2, 2->1, 1->0
            out_random_number <= {feedback, out_random_number[4:1]}; // Shift and feedback
    end

endmodule
